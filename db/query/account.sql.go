// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: account.sql

package query

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (id, name, description, account_type_id) VALUES (NULL, ?, ?, ?) RETURNING id, name, description, account_type_id
`

type CreateAccountParams struct {
	Name          string
	Description   sql.NullString
	AccountTypeID int64
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Name, arg.Description, arg.AccountTypeID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AccountTypeID,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT a.id AS id, a.name AS name, a.description AS description, at.id AS account_type_id, at.name AS account_type_name
FROM account a LEFT JOIN account_type at
WHERE a.name = ? 
AND at.name = ?
`

type GetAccountParams struct {
	Name   string
	Name_2 string
}

type GetAccountRow struct {
	ID              int64
	Name            string
	Description     sql.NullString
	AccountTypeID   int64
	AccountTypeName string
}

func (q *Queries) GetAccount(ctx context.Context, arg GetAccountParams) (GetAccountRow, error) {
	row := q.db.QueryRowContext(ctx, getAccount, arg.Name, arg.Name_2)
	var i GetAccountRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AccountTypeID,
		&i.AccountTypeName,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT a.id AS id, a.name AS name, a.description AS description, at.id AS account_type_id, at.name AS account_type_name
FROM account a LEFT JOIN account_type at
ON a.account_type_id = at.id
ORDER BY a.name
`

type ListAccountsRow struct {
	ID              int64
	Name            string
	Description     sql.NullString
	AccountTypeID   int64
	AccountTypeName string
}

func (q *Queries) ListAccounts(ctx context.Context) ([]ListAccountsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAccountsRow
	for rows.Next() {
		var i ListAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.AccountTypeID,
			&i.AccountTypeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
