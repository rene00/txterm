// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ImportRun is an object representing the database table.
type ImportRun struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	DateCreated time.Time `boil:"date_created" json:"date_created" toml:"date_created" yaml:"date_created"`
	Filename    string    `boil:"filename" json:"filename" toml:"filename" yaml:"filename"`

	R *importRunR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L importRunL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ImportRunColumns = struct {
	ID          string
	DateCreated string
	Filename    string
}{
	ID:          "id",
	DateCreated: "date_created",
	Filename:    "filename",
}

var ImportRunTableColumns = struct {
	ID          string
	DateCreated string
	Filename    string
}{
	ID:          "import_run.id",
	DateCreated: "import_run.date_created",
	Filename:    "import_run.filename",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ImportRunWhere = struct {
	ID          whereHelperint64
	DateCreated whereHelpertime_Time
	Filename    whereHelperstring
}{
	ID:          whereHelperint64{field: "\"import_run\".\"id\""},
	DateCreated: whereHelpertime_Time{field: "\"import_run\".\"date_created\""},
	Filename:    whereHelperstring{field: "\"import_run\".\"filename\""},
}

// ImportRunRels is where relationship names are stored.
var ImportRunRels = struct {
	TXImportRuns string
}{
	TXImportRuns: "TXImportRuns",
}

// importRunR is where relationships are stored.
type importRunR struct {
	TXImportRuns TransactionImportRunSlice `boil:"TXImportRuns" json:"TXImportRuns" toml:"TXImportRuns" yaml:"TXImportRuns"`
}

// NewStruct creates a new relationship struct
func (*importRunR) NewStruct() *importRunR {
	return &importRunR{}
}

func (r *importRunR) GetTXImportRuns() TransactionImportRunSlice {
	if r == nil {
		return nil
	}
	return r.TXImportRuns
}

// importRunL is where Load methods for each relationship are stored.
type importRunL struct{}

var (
	importRunAllColumns            = []string{"id", "date_created", "filename"}
	importRunColumnsWithoutDefault = []string{"date_created", "filename"}
	importRunColumnsWithDefault    = []string{"id"}
	importRunPrimaryKeyColumns     = []string{"id"}
	importRunGeneratedColumns      = []string{"id"}
)

type (
	// ImportRunSlice is an alias for a slice of pointers to ImportRun.
	// This should almost always be used instead of []ImportRun.
	ImportRunSlice []*ImportRun
	// ImportRunHook is the signature for custom ImportRun hook methods
	ImportRunHook func(context.Context, boil.ContextExecutor, *ImportRun) error

	importRunQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	importRunType                 = reflect.TypeOf(&ImportRun{})
	importRunMapping              = queries.MakeStructMapping(importRunType)
	importRunPrimaryKeyMapping, _ = queries.BindMapping(importRunType, importRunMapping, importRunPrimaryKeyColumns)
	importRunInsertCacheMut       sync.RWMutex
	importRunInsertCache          = make(map[string]insertCache)
	importRunUpdateCacheMut       sync.RWMutex
	importRunUpdateCache          = make(map[string]updateCache)
	importRunUpsertCacheMut       sync.RWMutex
	importRunUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var importRunAfterSelectHooks []ImportRunHook

var importRunBeforeInsertHooks []ImportRunHook
var importRunAfterInsertHooks []ImportRunHook

var importRunBeforeUpdateHooks []ImportRunHook
var importRunAfterUpdateHooks []ImportRunHook

var importRunBeforeDeleteHooks []ImportRunHook
var importRunAfterDeleteHooks []ImportRunHook

var importRunBeforeUpsertHooks []ImportRunHook
var importRunAfterUpsertHooks []ImportRunHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ImportRun) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importRunAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ImportRun) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importRunBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ImportRun) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importRunAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ImportRun) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importRunBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ImportRun) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importRunAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ImportRun) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importRunBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ImportRun) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importRunAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ImportRun) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importRunBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ImportRun) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importRunAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddImportRunHook registers your hook function for all future operations.
func AddImportRunHook(hookPoint boil.HookPoint, importRunHook ImportRunHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		importRunAfterSelectHooks = append(importRunAfterSelectHooks, importRunHook)
	case boil.BeforeInsertHook:
		importRunBeforeInsertHooks = append(importRunBeforeInsertHooks, importRunHook)
	case boil.AfterInsertHook:
		importRunAfterInsertHooks = append(importRunAfterInsertHooks, importRunHook)
	case boil.BeforeUpdateHook:
		importRunBeforeUpdateHooks = append(importRunBeforeUpdateHooks, importRunHook)
	case boil.AfterUpdateHook:
		importRunAfterUpdateHooks = append(importRunAfterUpdateHooks, importRunHook)
	case boil.BeforeDeleteHook:
		importRunBeforeDeleteHooks = append(importRunBeforeDeleteHooks, importRunHook)
	case boil.AfterDeleteHook:
		importRunAfterDeleteHooks = append(importRunAfterDeleteHooks, importRunHook)
	case boil.BeforeUpsertHook:
		importRunBeforeUpsertHooks = append(importRunBeforeUpsertHooks, importRunHook)
	case boil.AfterUpsertHook:
		importRunAfterUpsertHooks = append(importRunAfterUpsertHooks, importRunHook)
	}
}

// One returns a single importRun record from the query.
func (q importRunQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ImportRun, error) {
	o := &ImportRun{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for import_run")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ImportRun records from the query.
func (q importRunQuery) All(ctx context.Context, exec boil.ContextExecutor) (ImportRunSlice, error) {
	var o []*ImportRun

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ImportRun slice")
	}

	if len(importRunAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ImportRun records in the query.
func (q importRunQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count import_run rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q importRunQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if import_run exists")
	}

	return count > 0, nil
}

// TXImportRuns retrieves all the tx_import_run's TransactionImportRuns with an executor via import_run_id column.
func (o *ImportRun) TXImportRuns(mods ...qm.QueryMod) transcationImportRunQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tx_import_run\".\"import_run_id\"=?", o.ID),
	)

	return TransactionImportRuns(queryMods...)
}

// LoadTXImportRuns allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (importRunL) LoadTXImportRuns(ctx context.Context, e boil.ContextExecutor, singular bool, maybeImportRun interface{}, mods queries.Applicator) error {
	var slice []*ImportRun
	var object *ImportRun

	if singular {
		var ok bool
		object, ok = maybeImportRun.(*ImportRun)
		if !ok {
			object = new(ImportRun)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeImportRun)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeImportRun))
			}
		}
	} else {
		s, ok := maybeImportRun.(*[]*ImportRun)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeImportRun)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeImportRun))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &importRunR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &importRunR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tx_import_run`),
		qm.WhereIn(`tx_import_run.import_run_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tx_import_run")
	}

	var resultSlice []*TransactionImportRun
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tx_import_run")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tx_import_run")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tx_import_run")
	}

	if len(transcationImportRunAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TXImportRuns = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transcationImportRunR{}
			}
			foreign.R.ImportRun = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ImportRunID {
				local.R.TXImportRuns = append(local.R.TXImportRuns, foreign)
				if foreign.R == nil {
					foreign.R = &transcationImportRunR{}
				}
				foreign.R.ImportRun = local
				break
			}
		}
	}

	return nil
}

// AddTXImportRuns adds the given related objects to the existing relationships
// of the import_run, optionally inserting them as new records.
// Appends related to o.R.TXImportRuns.
// Sets related.R.ImportRun appropriately.
func (o *ImportRun) AddTXImportRuns(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TransactionImportRun) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ImportRunID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tx_import_run\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"import_run_id"}),
				strmangle.WhereClause("\"", "\"", 0, transcationImportRunPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ImportRunID = o.ID
		}
	}

	if o.R == nil {
		o.R = &importRunR{
			TXImportRuns: related,
		}
	} else {
		o.R.TXImportRuns = append(o.R.TXImportRuns, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transcationImportRunR{
				ImportRun: o,
			}
		} else {
			rel.R.ImportRun = o
		}
	}
	return nil
}

// ImportRuns retrieves all the records using an executor.
func ImportRuns(mods ...qm.QueryMod) importRunQuery {
	mods = append(mods, qm.From("\"import_run\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"import_run\".*"})
	}

	return importRunQuery{q}
}

// FindImportRun retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindImportRun(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ImportRun, error) {
	importRunObj := &ImportRun{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"import_run\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, importRunObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from import_run")
	}

	if err = importRunObj.doAfterSelectHooks(ctx, exec); err != nil {
		return importRunObj, err
	}

	return importRunObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ImportRun) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no import_run provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(importRunColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	importRunInsertCacheMut.RLock()
	cache, cached := importRunInsertCache[key]
	importRunInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			importRunAllColumns,
			importRunColumnsWithDefault,
			importRunColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, importRunGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(importRunType, importRunMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(importRunType, importRunMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"import_run\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"import_run\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into import_run")
	}

	if !cached {
		importRunInsertCacheMut.Lock()
		importRunInsertCache[key] = cache
		importRunInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ImportRun.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ImportRun) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	importRunUpdateCacheMut.RLock()
	cache, cached := importRunUpdateCache[key]
	importRunUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			importRunAllColumns,
			importRunPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, importRunGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update import_run, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"import_run\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, importRunPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(importRunType, importRunMapping, append(wl, importRunPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update import_run row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for import_run")
	}

	if !cached {
		importRunUpdateCacheMut.Lock()
		importRunUpdateCache[key] = cache
		importRunUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q importRunQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for import_run")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for import_run")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ImportRunSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importRunPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"import_run\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, importRunPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in importRun slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all importRun")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ImportRun) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no import_run provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(importRunColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	importRunUpsertCacheMut.RLock()
	cache, cached := importRunUpsertCache[key]
	importRunUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			importRunAllColumns,
			importRunColumnsWithDefault,
			importRunColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			importRunAllColumns,
			importRunPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert import_run, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(importRunPrimaryKeyColumns))
			copy(conflict, importRunPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"import_run\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(importRunType, importRunMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(importRunType, importRunMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert import_run")
	}

	if !cached {
		importRunUpsertCacheMut.Lock()
		importRunUpsertCache[key] = cache
		importRunUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ImportRun record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ImportRun) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ImportRun provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), importRunPrimaryKeyMapping)
	sql := "DELETE FROM \"import_run\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from import_run")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for import_run")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q importRunQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no importRunQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from import_run")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for import_run")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ImportRunSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(importRunBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importRunPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"import_run\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, importRunPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from importRun slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for import_run")
	}

	if len(importRunAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ImportRun) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindImportRun(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImportRunSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ImportRunSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importRunPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"import_run\".* FROM \"import_run\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, importRunPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ImportRunSlice")
	}

	*o = slice

	return nil
}

// ImportRunExists checks if the ImportRun row exists.
func ImportRunExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"import_run\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if import_run exists")
	}

	return exists, nil
}

// Exists checks if the ImportRun row exists.
func (o *ImportRun) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ImportRunExists(ctx, exec, o.ID)
}
