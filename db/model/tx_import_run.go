// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TransactionImportRun is an object representing the database table.
type TransactionImportRun struct {
	ID            int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	TransactionID int64 `boil:"tx_id" json:"tx_id" toml:"tx_id" yaml:"tx_id"`
	ImportRunID   int64 `boil:"import_run_id" json:"import_run_id" toml:"import_run_id" yaml:"import_run_id"`

	R *transcationImportRunR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transcationImportRunL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionImportRunColumns = struct {
	ID            string
	TransactionID string
	ImportRunID   string
}{
	ID:            "id",
	TransactionID: "tx_id",
	ImportRunID:   "import_run_id",
}

var TransactionImportRunTableColumns = struct {
	ID            string
	TransactionID string
	ImportRunID   string
}{
	ID:            "tx_import_run.id",
	TransactionID: "tx_import_run.tx_id",
	ImportRunID:   "tx_import_run.import_run_id",
}

// Generated where

var TransactionImportRunWhere = struct {
	ID            whereHelperint64
	TransactionID whereHelperint64
	ImportRunID   whereHelperint64
}{
	ID:            whereHelperint64{field: "\"tx_import_run\".\"id\""},
	TransactionID: whereHelperint64{field: "\"tx_import_run\".\"tx_id\""},
	ImportRunID:   whereHelperint64{field: "\"tx_import_run\".\"import_run_id\""},
}

// TransactionImportRunRels is where relationship names are stored.
var TransactionImportRunRels = struct {
	ImportRun string
	TX        string
}{
	ImportRun: "ImportRun",
	TX:        "TX",
}

// transcationImportRunR is where relationships are stored.
type transcationImportRunR struct {
	ImportRun *ImportRun   `boil:"ImportRun" json:"ImportRun" toml:"ImportRun" yaml:"ImportRun"`
	TX        *Transaction `boil:"TX" json:"TX" toml:"TX" yaml:"TX"`
}

// NewStruct creates a new relationship struct
func (*transcationImportRunR) NewStruct() *transcationImportRunR {
	return &transcationImportRunR{}
}

func (r *transcationImportRunR) GetImportRun() *ImportRun {
	if r == nil {
		return nil
	}
	return r.ImportRun
}

func (r *transcationImportRunR) GetTX() *Transaction {
	if r == nil {
		return nil
	}
	return r.TX
}

// transcationImportRunL is where Load methods for each relationship are stored.
type transcationImportRunL struct{}

var (
	transcationImportRunAllColumns            = []string{"id", "tx_id", "import_run_id"}
	transcationImportRunColumnsWithoutDefault = []string{"tx_id", "import_run_id"}
	transcationImportRunColumnsWithDefault    = []string{"id"}
	transcationImportRunPrimaryKeyColumns     = []string{"id"}
	transcationImportRunGeneratedColumns      = []string{"id"}
)

type (
	// TransactionImportRunSlice is an alias for a slice of pointers to TransactionImportRun.
	// This should almost always be used instead of []TransactionImportRun.
	TransactionImportRunSlice []*TransactionImportRun
	// TransactionImportRunHook is the signature for custom TransactionImportRun hook methods
	TransactionImportRunHook func(context.Context, boil.ContextExecutor, *TransactionImportRun) error

	transcationImportRunQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transcationImportRunType                 = reflect.TypeOf(&TransactionImportRun{})
	transcationImportRunMapping              = queries.MakeStructMapping(transcationImportRunType)
	transcationImportRunPrimaryKeyMapping, _ = queries.BindMapping(transcationImportRunType, transcationImportRunMapping, transcationImportRunPrimaryKeyColumns)
	transcationImportRunInsertCacheMut       sync.RWMutex
	transcationImportRunInsertCache          = make(map[string]insertCache)
	transcationImportRunUpdateCacheMut       sync.RWMutex
	transcationImportRunUpdateCache          = make(map[string]updateCache)
	transcationImportRunUpsertCacheMut       sync.RWMutex
	transcationImportRunUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var transcationImportRunAfterSelectHooks []TransactionImportRunHook

var transcationImportRunBeforeInsertHooks []TransactionImportRunHook
var transcationImportRunAfterInsertHooks []TransactionImportRunHook

var transcationImportRunBeforeUpdateHooks []TransactionImportRunHook
var transcationImportRunAfterUpdateHooks []TransactionImportRunHook

var transcationImportRunBeforeDeleteHooks []TransactionImportRunHook
var transcationImportRunAfterDeleteHooks []TransactionImportRunHook

var transcationImportRunBeforeUpsertHooks []TransactionImportRunHook
var transcationImportRunAfterUpsertHooks []TransactionImportRunHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TransactionImportRun) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transcationImportRunAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TransactionImportRun) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transcationImportRunBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TransactionImportRun) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transcationImportRunAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TransactionImportRun) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transcationImportRunBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TransactionImportRun) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transcationImportRunAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TransactionImportRun) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transcationImportRunBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TransactionImportRun) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transcationImportRunAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TransactionImportRun) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transcationImportRunBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TransactionImportRun) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transcationImportRunAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransactionImportRunHook registers your hook function for all future operations.
func AddTransactionImportRunHook(hookPoint boil.HookPoint, transcationImportRunHook TransactionImportRunHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		transcationImportRunAfterSelectHooks = append(transcationImportRunAfterSelectHooks, transcationImportRunHook)
	case boil.BeforeInsertHook:
		transcationImportRunBeforeInsertHooks = append(transcationImportRunBeforeInsertHooks, transcationImportRunHook)
	case boil.AfterInsertHook:
		transcationImportRunAfterInsertHooks = append(transcationImportRunAfterInsertHooks, transcationImportRunHook)
	case boil.BeforeUpdateHook:
		transcationImportRunBeforeUpdateHooks = append(transcationImportRunBeforeUpdateHooks, transcationImportRunHook)
	case boil.AfterUpdateHook:
		transcationImportRunAfterUpdateHooks = append(transcationImportRunAfterUpdateHooks, transcationImportRunHook)
	case boil.BeforeDeleteHook:
		transcationImportRunBeforeDeleteHooks = append(transcationImportRunBeforeDeleteHooks, transcationImportRunHook)
	case boil.AfterDeleteHook:
		transcationImportRunAfterDeleteHooks = append(transcationImportRunAfterDeleteHooks, transcationImportRunHook)
	case boil.BeforeUpsertHook:
		transcationImportRunBeforeUpsertHooks = append(transcationImportRunBeforeUpsertHooks, transcationImportRunHook)
	case boil.AfterUpsertHook:
		transcationImportRunAfterUpsertHooks = append(transcationImportRunAfterUpsertHooks, transcationImportRunHook)
	}
}

// One returns a single transcationImportRun record from the query.
func (q transcationImportRunQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TransactionImportRun, error) {
	o := &TransactionImportRun{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for tx_import_run")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TransactionImportRun records from the query.
func (q transcationImportRunQuery) All(ctx context.Context, exec boil.ContextExecutor) (TransactionImportRunSlice, error) {
	var o []*TransactionImportRun

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to TransactionImportRun slice")
	}

	if len(transcationImportRunAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TransactionImportRun records in the query.
func (q transcationImportRunQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count tx_import_run rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transcationImportRunQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if tx_import_run exists")
	}

	return count > 0, nil
}

// ImportRun pointed to by the foreign key.
func (o *TransactionImportRun) ImportRun(mods ...qm.QueryMod) importRunQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ImportRunID),
	}

	queryMods = append(queryMods, mods...)

	return ImportRuns(queryMods...)
}

// TX pointed to by the foreign key.
func (o *TransactionImportRun) TX(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TransactionID),
	}

	queryMods = append(queryMods, mods...)

	return Transactions(queryMods...)
}

// LoadImportRun allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transcationImportRunL) LoadImportRun(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransactionImportRun interface{}, mods queries.Applicator) error {
	var slice []*TransactionImportRun
	var object *TransactionImportRun

	if singular {
		var ok bool
		object, ok = maybeTransactionImportRun.(*TransactionImportRun)
		if !ok {
			object = new(TransactionImportRun)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransactionImportRun)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransactionImportRun))
			}
		}
	} else {
		s, ok := maybeTransactionImportRun.(*[]*TransactionImportRun)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransactionImportRun)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransactionImportRun))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transcationImportRunR{}
		}
		args = append(args, object.ImportRunID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transcationImportRunR{}
			}

			for _, a := range args {
				if a == obj.ImportRunID {
					continue Outer
				}
			}

			args = append(args, obj.ImportRunID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`import_run`),
		qm.WhereIn(`import_run.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ImportRun")
	}

	var resultSlice []*ImportRun
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ImportRun")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for import_run")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for import_run")
	}

	if len(importRunAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ImportRun = foreign
		if foreign.R == nil {
			foreign.R = &importRunR{}
		}
		foreign.R.TXImportRuns = append(foreign.R.TXImportRuns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ImportRunID == foreign.ID {
				local.R.ImportRun = foreign
				if foreign.R == nil {
					foreign.R = &importRunR{}
				}
				foreign.R.TXImportRuns = append(foreign.R.TXImportRuns, local)
				break
			}
		}
	}

	return nil
}

// LoadTX allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transcationImportRunL) LoadTX(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransactionImportRun interface{}, mods queries.Applicator) error {
	var slice []*TransactionImportRun
	var object *TransactionImportRun

	if singular {
		var ok bool
		object, ok = maybeTransactionImportRun.(*TransactionImportRun)
		if !ok {
			object = new(TransactionImportRun)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransactionImportRun)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransactionImportRun))
			}
		}
	} else {
		s, ok := maybeTransactionImportRun.(*[]*TransactionImportRun)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransactionImportRun)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransactionImportRun))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transcationImportRunR{}
		}
		args = append(args, object.TransactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transcationImportRunR{}
			}

			for _, a := range args {
				if a == obj.TransactionID {
					continue Outer
				}
			}

			args = append(args, obj.TransactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tx`),
		qm.WhereIn(`tx.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tx")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tx")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TX = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.TXImportRuns = append(foreign.R.TXImportRuns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionID == foreign.ID {
				local.R.TX = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TXImportRuns = append(foreign.R.TXImportRuns, local)
				break
			}
		}
	}

	return nil
}

// SetImportRun of the transcationImportRun to the related item.
// Sets o.R.ImportRun to related.
// Adds o to related.R.TXImportRuns.
func (o *TransactionImportRun) SetImportRun(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ImportRun) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tx_import_run\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"import_run_id"}),
		strmangle.WhereClause("\"", "\"", 0, transcationImportRunPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ImportRunID = related.ID
	if o.R == nil {
		o.R = &transcationImportRunR{
			ImportRun: related,
		}
	} else {
		o.R.ImportRun = related
	}

	if related.R == nil {
		related.R = &importRunR{
			TXImportRuns: TransactionImportRunSlice{o},
		}
	} else {
		related.R.TXImportRuns = append(related.R.TXImportRuns, o)
	}

	return nil
}

// SetTX of the transcationImportRun to the related item.
// Sets o.R.TX to related.
// Adds o to related.R.TXImportRuns.
func (o *TransactionImportRun) SetTX(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tx_import_run\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"tx_id"}),
		strmangle.WhereClause("\"", "\"", 0, transcationImportRunPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionID = related.ID
	if o.R == nil {
		o.R = &transcationImportRunR{
			TX: related,
		}
	} else {
		o.R.TX = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TXImportRuns: TransactionImportRunSlice{o},
		}
	} else {
		related.R.TXImportRuns = append(related.R.TXImportRuns, o)
	}

	return nil
}

// TransactionImportRuns retrieves all the records using an executor.
func TransactionImportRuns(mods ...qm.QueryMod) transcationImportRunQuery {
	mods = append(mods, qm.From("\"tx_import_run\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tx_import_run\".*"})
	}

	return transcationImportRunQuery{q}
}

// FindTransactionImportRun retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactionImportRun(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TransactionImportRun, error) {
	transcationImportRunObj := &TransactionImportRun{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tx_import_run\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, transcationImportRunObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from tx_import_run")
	}

	if err = transcationImportRunObj.doAfterSelectHooks(ctx, exec); err != nil {
		return transcationImportRunObj, err
	}

	return transcationImportRunObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransactionImportRun) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no tx_import_run provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transcationImportRunColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transcationImportRunInsertCacheMut.RLock()
	cache, cached := transcationImportRunInsertCache[key]
	transcationImportRunInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transcationImportRunAllColumns,
			transcationImportRunColumnsWithDefault,
			transcationImportRunColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, transcationImportRunGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(transcationImportRunType, transcationImportRunMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transcationImportRunType, transcationImportRunMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tx_import_run\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tx_import_run\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into tx_import_run")
	}

	if !cached {
		transcationImportRunInsertCacheMut.Lock()
		transcationImportRunInsertCache[key] = cache
		transcationImportRunInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TransactionImportRun.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransactionImportRun) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transcationImportRunUpdateCacheMut.RLock()
	cache, cached := transcationImportRunUpdateCache[key]
	transcationImportRunUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transcationImportRunAllColumns,
			transcationImportRunPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, transcationImportRunGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update tx_import_run, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tx_import_run\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, transcationImportRunPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transcationImportRunType, transcationImportRunMapping, append(wl, transcationImportRunPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update tx_import_run row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for tx_import_run")
	}

	if !cached {
		transcationImportRunUpdateCacheMut.Lock()
		transcationImportRunUpdateCache[key] = cache
		transcationImportRunUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q transcationImportRunQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for tx_import_run")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for tx_import_run")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionImportRunSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transcationImportRunPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tx_import_run\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transcationImportRunPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in transcationImportRun slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all transcationImportRun")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransactionImportRun) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no tx_import_run provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transcationImportRunColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transcationImportRunUpsertCacheMut.RLock()
	cache, cached := transcationImportRunUpsertCache[key]
	transcationImportRunUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transcationImportRunAllColumns,
			transcationImportRunColumnsWithDefault,
			transcationImportRunColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			transcationImportRunAllColumns,
			transcationImportRunPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert tx_import_run, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(transcationImportRunPrimaryKeyColumns))
			copy(conflict, transcationImportRunPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"tx_import_run\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(transcationImportRunType, transcationImportRunMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transcationImportRunType, transcationImportRunMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert tx_import_run")
	}

	if !cached {
		transcationImportRunUpsertCacheMut.Lock()
		transcationImportRunUpsertCache[key] = cache
		transcationImportRunUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TransactionImportRun record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactionImportRun) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no TransactionImportRun provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transcationImportRunPrimaryKeyMapping)
	sql := "DELETE FROM \"tx_import_run\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from tx_import_run")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for tx_import_run")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transcationImportRunQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no transcationImportRunQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from tx_import_run")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for tx_import_run")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionImportRunSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(transcationImportRunBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transcationImportRunPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tx_import_run\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transcationImportRunPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from transcationImportRun slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for tx_import_run")
	}

	if len(transcationImportRunAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactionImportRun) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTransactionImportRun(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionImportRunSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionImportRunSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transcationImportRunPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tx_import_run\".* FROM \"tx_import_run\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transcationImportRunPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TransactionImportRunSlice")
	}

	*o = slice

	return nil
}

// TransactionImportRunExists checks if the TransactionImportRun row exists.
func TransactionImportRunExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tx_import_run\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if tx_import_run exists")
	}

	return exists, nil
}

// Exists checks if the TransactionImportRun row exists.
func (o *TransactionImportRun) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TransactionImportRunExists(ctx, exec, o.ID)
}
