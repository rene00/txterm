// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package query

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createImportStmt, err = db.PrepareContext(ctx, createImport); err != nil {
		return nil, fmt.Errorf("error preparing query CreateImport: %w", err)
	}
	if q.createTxStmt, err = db.PrepareContext(ctx, createTx); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTx: %w", err)
	}
	if q.getDuplicateTxStmt, err = db.PrepareContext(ctx, getDuplicateTx); err != nil {
		return nil, fmt.Errorf("error preparing query GetDuplicateTx: %w", err)
	}
	if q.getTxsStmt, err = db.PrepareContext(ctx, getTxs); err != nil {
		return nil, fmt.Errorf("error preparing query GetTxs: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createImportStmt != nil {
		if cerr := q.createImportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createImportStmt: %w", cerr)
		}
	}
	if q.createTxStmt != nil {
		if cerr := q.createTxStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTxStmt: %w", cerr)
		}
	}
	if q.getDuplicateTxStmt != nil {
		if cerr := q.getDuplicateTxStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDuplicateTxStmt: %w", cerr)
		}
	}
	if q.getTxsStmt != nil {
		if cerr := q.getTxsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTxsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                 DBTX
	tx                 *sql.Tx
	createImportStmt   *sql.Stmt
	createTxStmt       *sql.Stmt
	getDuplicateTxStmt *sql.Stmt
	getTxsStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                 tx,
		tx:                 tx,
		createImportStmt:   q.createImportStmt,
		createTxStmt:       q.createTxStmt,
		getDuplicateTxStmt: q.getDuplicateTxStmt,
		getTxsStmt:         q.getTxsStmt,
	}
}
