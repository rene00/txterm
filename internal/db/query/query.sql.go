// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package query

import (
	"context"
	"time"
)

const getTxs = `-- name: GetTxs :many
SELECT id, date_posted, memo FROM tx ORDER BY id
`

func (q *Queries) GetTxs(ctx context.Context) ([]Tx, error) {
	rows, err := q.query(ctx, q.getTxsStmt, getTxs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tx
	for rows.Next() {
		var i Tx
		if err := rows.Scan(&i.ID, &i.DatePosted, &i.Memo); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTx = `-- name: InsertTx :exec
INSERT INTO tx (id, date_posted, memo) VALUES (null, ?, ?)
RETURNING id, date_posted, memo
`

type InsertTxParams struct {
	DatePosted time.Time `json:"date_posted"`
	Memo       string    `json:"memo"`
}

func (q *Queries) InsertTx(ctx context.Context, arg InsertTxParams) error {
	_, err := q.exec(ctx, q.insertTxStmt, insertTx, arg.DatePosted, arg.Memo)
	return err
}
